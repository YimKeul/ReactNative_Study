컴포넌트 : 재사용할 수 있는 조립 블록. ex) 화면에 나타나는 UI 요소
View == html의 div와 비슷한 역할을 한다
의미없는 감싸기는 <Fragment></Fragment> || <> </> 가능

if문 : 즉시실행함수 형태로 작성
{(  () => {      } ) ()  ) } 이 형태

삼항연산자도 가능

{ ___ === ____ ? __ : __  }

jsx경우 null은 허용하지만 undefined는 오류를 발생시킨다.

인라인스타일링

jsx에서는 html과는달리 객체형태로 입력
html : background-Color
jsx : backgroundColor


용어 정리 : props : 속성
            state : 상태



내장 컴포넌트



자

html css 에서 style을 정의할때
style{
  원하는 부분{

  }
} 
이런식으로 정의를 내렸는데

rn에서는

style = {
  {

  }
}
아.. 앞에 원하는 부분없이 그냥 서술해서 중괄호쌍이 두개구나 ok 확인


props와 state
props : properites를 줄인 표현으로 부모 컴포넌트로부터 전달된 속성괎 혹은 상속받은 속성값
부모 컴포넌트가 자식 컴포넌트의 props를 설정하면 자식 컴포넌트에서는 해당 props를 사용할수 있지만 변경은 불가능
변경이 필요한 경우 props를 설정 및 전달한 부모 컴포넌트에서 변경

state : 컴포넌트 내부에서 생성되고 값을 변경할 수 있으며 이를 이용해 컴포넌트 상태를 관리
state란 컴포넌트에서 변화할 수 있는 값을 나타내며, 상태가 변하는 컴포넌트는 리렌더링된다

Hooks라는 것을 사용해 함수형 컴포넌트에서도 상태를 관리할 수 있게 되었음

useState : 리액트 Hooks 중 useState는 함수형 컴포넌트에서 상태를 관리 할 수 있도록 해줌
          상태를 관리하는 변수와 그 변수를 변경할수 있는 setter 함수를 배열로 반환
          상태 변수는 직접 변경하는 것이 아니라 useState 함수에서 반환한 세터 함수를 이용해야함
          useState 함수를 호출할 때 파라미터에 생성되는 상태의 초기값을 전달할 수 있고
          초기값을 전달하지 않으면 undefined로 설정되어 에러 발생. 항상 초기화 하기

        

이벤트 
책에서는 주로 사용되는 이벤트 몇가지만 소개한다. (훨씬 많은 것을 인지하자)

press 이벤트
웹 프로그래밍에서 가장 많이 사용하는 이벤트 중 하나는 사용자가 특정 DOM(문서)를 클릭했을 때 호출되는 
onClick 이벤트
RN에서 가장 비슷한 것이 press이다

버튼을 만들 때 사용하는 TouchableOpacity 컴포넌트에서 설정할 수 있는 press 이벤트의 종류는 4가지
onPressIn : 터치가 시작될 때 항상 호출
onPressOut : 터치가 해제될 때 항상 호출
onPress : 터치가 해제될 때 onPressOut 이후 호출
onLongPress : 터치가 일정 시간 이상 지속되면 호출


Pressable 컴포넌트
기존의 TouchableOpacity 컴포넌트를 대체하는 Pressable 컴포넌트가 추가됨.
Pressable 사용을 권장함

사용자의 터치에 상호 작용하는 컴포넌트
press 이벤트도 동일하게 존재하고 동작 방식도 같음
차이점은 HitRect 와 PressRect
==> 휴대폰의 화면은 작고 사용자마다 손가락크기와 두꼐도 다르기 때문에 유효범위를 설정해준것
유효범위 설정 : HitRect
얼마나 버튼을 누른 상태에서 벗어났다고 판단이 가능한지 설정하는 것은 PressRect기능


3장을 마치며...
JSX 문법과 컴포넌트에 대해 알아봤다
JSX 문법은 HTML과 비슷하다. 하지만 약간씩 다른 문법을 보면 당황스러울 수 있다. JSX는 직관적이고 사용하기 편하다.
RN은 컴포넌트의 조합으로 만들어지므로 컴포넌트가 굉장히 중요하다. RN에서 다양한 내장 컴포넌트를 제공하고 있찌만, 커스텀 컴포넌트를 만들어서 사용하는 경우가 생각보다 많으니 필요한 컴포넌트를 만드는 연습을 많이 하는 것이 좋다.

컴포넌트들을 조합하다 보면 자연스롭게 부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하고, 
